spring.application.name=order-service

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order-service
spring.datasource.username=root
spring.datasource.password=1234
spring.jpa.hibernate.ddl-auto=update

server.port=${PORT:0}
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}


#Definimos la url del servidor eureka donde esta corriendo y en el puerto en que esta corriendo
eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka

#este es el nombre con el cual se va a registrar en el servidor eureka

######## IMPORTANTE EN LO DE RESILIAN, SIEMPRE DEBE DE IR ESPECIFICANDO EL TAG DEL PROYECTO EN ESTE CASO INVENTORY

# Activa los circuit breakers de management.health
management.health.circuitbreakers.enabled=true
# Expone todos los endpoints de management para la aplicación
management.endpoints.web.exposure.include=*
# Muestra detalles completos de la salud de los endpoints de management.endpoint
management.endpoint.health.show-details=always

##RESILIENCE4J PROPERTIES
# Activa el registro de los health indicators de los circuit breakers de Resilience4j
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
# Configura el tamaño del buffer de eventos para los circuit breakers de Resilience4j
resilience4j.circuitbreaker.instances.inventory.eventConsumerBufferSize=10
# Configura el tipo de ventana deslizante para los circuit breakers de Resilience4j
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
# Configura el tamaño de la ventana deslizante para los circuit breakers de Resilience4j
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
# Configura el umbral de tasa de error para los circuit breakers de Resilience4j
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
# Configura el tiempo de espera en estado abierto para los circuit breakers de Resilience4j
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
# Configura el número permitido de llamadas en estado semiabierto para los circuit breakers de Resilience4j
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
# Activa la transición automática desde estado abierto a semiabierto para los circuit breakers de Resilience4j
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true



##RESILENCE4J TIMEOUT PROPERTIES
resilience4j.timelimiter.instances.inventory.timeoutDuration=3s

##RESILENCE4J RETRY PROPERTIES

#define el número máximo de intentos que se realizarán antes de que se de por fallida una operación. En este caso, se han configurado un máximo de 3 intentos para la operación en el circuit breaker
resilience4j.retry.instances.inventory.maxAttempts=3

#especifica el tiempo de espera que se debe respetar entre cada intento. En este caso, se ha establecido un tiempo de espera de 5 segundos para la operación en el circuit breaker
resilience4j.retry.instances.inventory.waitDuration=5s


#Cofiguracion sleuth y zipkin
spring.zipkin.base-url=http://localhost:9411
#hacemos el 100% de las peticiones hagan trace
spring.sleuth.sampler.probability= 1.0




#Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
# este es para que kafka sepa como debemos de serializar la key y enviarla a kafka broker en este caso este value sera un String
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer

# este es para que kafka sepa como debemos de serializar el value y enviarla a kafka broker en este caso este value sera un JSON
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

spring.kafka.producer.properties.spring.json.type.mapping=event:com.maicol1912.orderservice.event.OrderPlacedEvent